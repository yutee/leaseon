#cloud-config

package_update: true
package_upgrade: true

packages:
  - docker.io
  - git
  - curl

# Create docker group and add user
groups:
  - docker

users:
  - default
  - name: azureuser
    groups: [sudo, docker]
    shell: /bin/bash

# Write files to the system
write_files:
  # Create a deployment script
  - path: /tmp/deploy-app.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Starting application deployment..."
      
      # Wait for Docker to be ready
      echo "Waiting for Docker service..."
      while ! docker info >/dev/null 2>&1; do
        echo "Waiting for Docker daemon..."
        sleep 5
      done
      echo "Docker is ready"
      
      # Create application directory
      mkdir -p /opt/leaseon-app
      cd /opt/leaseon-app
      
      # Clone the application code from GitHub repository
      echo "Cloning repository from GitHub..."
      git clone https://github.com/yutee/leaseon.git repo-temp
      
      # Copy the app directory contents to current directory
      echo "Setting up application files..."
      if [ -d "repo-temp/app" ]; then
        cp -r repo-temp/app/* .
        echo "Application files copied from app directory"
      else
        echo "App directory not found in repository"
        # List repository structure for debugging
        echo "Repository structure:"
        find repo-temp -type f -name "*.py" | head -10
        
        # Try to copy from root if app directory doesn't exist
        if [ -f "repo-temp/main.py" ]; then
          cp repo-temp/*.py . 2>/dev/null || true
          cp repo-temp/requirements.txt . 2>/dev/null || true
          cp repo-temp/Dockerfile . 2>/dev/null || true
          echo "Files copied from repository root"
        fi
      fi
      
      # Clean up temporary repository clone
      rm -rf repo-temp
      
      # Verify essential files exist and create fallbacks if needed
      if [ ! -f "main.py" ]; then
        echo "main.py not found! Creating fallback application..."
        cat > main.py << 'PYEOF'
      from fastapi import FastAPI
      import uvicorn
      import socket
      from datetime import datetime
      
      app = FastAPI(title="Leaseon ML API", version="1.0.0")
      
      HOSTNAME = socket.gethostname()
      try:
          IP_ADDRESS = socket.gethostbyname(HOSTNAME)
      except:
          IP_ADDRESS = "Unknown"
      
      @app.get("/")
      async def root():
          return {
              "message": "Welcome to Leaseon Football Transfer Predictor API (Fallback)",
              "hostname": HOSTNAME,
              "ip_address": IP_ADDRESS,
              "timestamp": datetime.now().isoformat(),
              "status": "running"
          }
      
      @app.get("/health")
      async def health_check():
          return {
              "status": "healthy",
              "hostname": HOSTNAME,
              "ip_address": IP_ADDRESS,
              "timestamp": datetime.now().isoformat()
          }
      
      if __name__ == "__main__":
          uvicorn.run(app, host="0.0.0.0", port=8000)
      PYEOF
      fi
      
      if [ ! -f "requirements.txt" ]; then
        echo "requirements.txt not found! Creating basic requirements..."
        cat > requirements.txt << 'REQEOF'
      fastapi==0.104.1
      uvicorn[standard]==0.24.0
      pandas==2.1.3
      numpy==1.25.2
      scikit-learn==1.3.2
      pydantic==2.5.0
      python-multipart==0.0.6
      jinja2==3.1.2
      aiofiles==23.2.1
      REQEOF
      fi
      
      if [ ! -f "Dockerfile" ]; then
        echo "Dockerfile not found! Creating Dockerfile..."
        cat > Dockerfile << 'DOCKEREOF'
      FROM python:3.11-slim
      
      WORKDIR /app
      
      RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*
      
      COPY requirements.txt .
      RUN pip install --no-cache-dir -r requirements.txt
      
      RUN mkdir -p /app/models /app/data
      
      COPY *.py ./
      
      ENV PYTHONPATH=/app
      ENV PYTHONUNBUFFERED=1
      ENV ENVIRONMENT=production
      
      RUN echo '#!/bin/bash\necho "Starting Football Transfer Predictor..."\necho "Hostname: $(hostname)"\necho "IP Address: $(hostname -I | awk '\''{print $1}'\'')" \necho "Checking for trained model..."\nif [ ! -f "/app/models/transfer_model.pkl" ]; then\n    echo "No model found. Training new model..."\n    python model_training.py 2>/dev/null || echo "Model training script not found or failed"\nfi\necho "Starting FastAPI server..."\nexec uvicorn main:app --host 0.0.0.0 --port 8000\n' > /app/start.sh && chmod +x /app/start.sh
      
      EXPOSE 8000
      
      HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 CMD curl -f http://localhost:8000/health || exit 1
      
      CMD ["/app/start.sh"]
      DOCKEREOF
      fi
      
      echo "Final file check:"
      ls -la
      echo "Content of main.py (first 10 lines):"
      head -10 main.py
      
      echo "Building Docker image..."
      docker build -t leaseon-api:latest .
      
      echo "Starting application container..."
      # Stop and remove existing container if it exists
      docker stop leaseon-api 2>/dev/null || true
      docker rm leaseon-api 2>/dev/null || true
      
      # Run the new container
      docker run -d \
        --name leaseon-api \
        --restart=unless-stopped \
        -p 8000:8000 \
        -e ENVIRONMENT=production \
        leaseon-api:latest
      
      echo "Waiting for application to start..."
      sleep 30
      
      # Test the application
      echo "Testing application endpoints..."
      curl -f http://localhost:8000/health || echo "Health check failed"
      curl -f http://localhost:8000/ || echo "Root endpoint failed"
      
      echo "Application deployment completed!"
      echo "Application should be accessible on port 8000"
      
      # Show container status
      docker ps | grep leaseon-api || echo "Container not running"
    permissions: '0755'

# Commands to run
runcmd:
  # Enable and start Docker
  - systemctl enable docker
  - systemctl start docker
  
  # Add azureuser to docker group
  - usermod -aG docker azureuser
  
  # Wait for Docker to be ready
  - sleep 15
  
  # Run the deployment script
  - /tmp/deploy-app.sh > /var/log/app-deployment.log 2>&1
  
  # Create a status check script
  - |
    cat > /tmp/deployment-status.sh << 'EOF'
    #!/bin/bash
    echo "=== Deployment Status ==="
    echo "Hostname: $(hostname)"
    echo "Private IP: $(hostname -I | awk '{print $1}')"
    echo "Timestamp: $(date)"
    echo ""
    echo "=== Docker Status ==="
    docker ps | grep leaseon-api || echo "Container not found"
    echo ""
    echo "=== Application Health ==="
    curl -s http://localhost:8000/health | head -5 || echo "Health check failed"
    echo ""
    echo "=== Recent Logs ==="
    docker logs leaseon-api --tail 10 2>/dev/null || echo "No container logs"
    EOF
  - chmod +x /tmp/deployment-status.sh
  
  # Schedule a final health check after deployment
  - sleep 120 && /tmp/deployment-status.sh > /var/log/final-status.log 2>&1 &

# Set timezone
timezone: UTC

final_message: "Leaseon ML API deployment initiated! Check /var/log/app-deployment.log for deployment status."